package cep;

import com.ftn.sbnz.model.event.RoundResultEvent;
import com.ftn.sbnz.model.event.WinStreakEvent;
import com.ftn.sbnz.model.event.LossStreakEvent;
import com.ftn.sbnz.model.event.PlayerPositionEvent;
import com.ftn.sbnz.model.event.TurnStartEvent;
import com.ftn.sbnz.model.RoundResult;
import com.ftn.sbnz.model.PlayerPosition;
import com.ftn.sbnz.model.PlayerPositionTrend;
import com.ftn.sbnz.model.Game;
import com.ftn.sbnz.model.Player;
import com.ftn.sbnz.model.Streak;
import com.ftn.sbnz.model.event.PlayerPositionValueEvent;
import com.ftn.sbnz.model.event.PlayerPositionChangeEvent;

declare window LastRoundResultEvents
    RoundResultEvent() over window:length(3)
end

declare window LastPlayerPositionValueEvents
    PlayerPositionValueEvent() over window:length(2)
end

declare window LastPlayerPositionChangeEvents
    PlayerPositionChangeEvent() over window:length(2)
end

declare window LastPlayerPositionEvents
    PlayerPositionEvent() over window:length(3)
end


rule "Hello"
    when
        eval(5 > 3);
    then
        System.out.println("Hello world!");
end

rule "Write round result"
    no-loop true
    when
        $game: Game()
        $r: RoundResultEvent()
    then
		System.out.println("> " + $r.getResult());
end

rule "End win streak"
    no-loop true
    when
        $game: Game()
        RoundResultEvent($t: timestamp, result == RoundResult.LOSS)
        not(RoundResultEvent(timestamp > $t))
        $s: WinStreakEvent()
    then
		System.out.println("DELETED WIN STREAK");
		modify($game) { setStreak(Streak.NONE) }
        delete($s);
end

rule "End loss streak"
    no-loop true
    when
        $game: Game()
        $r: RoundResultEvent(result == RoundResult.WIN)
        not RoundResultEvent(this after $r)
        $s: LossStreakEvent()
    then
		modify($game) { setStreak(Streak.NONE) }
		System.out.println("DELETED LOSS STREAK");
        delete($s);
end

rule "Detect Win Streak"
    no-loop true
    when
        $game: Game()
        $resultEvent: RoundResultEvent()
        Number(intValue == 3) from accumulate (
            $event: RoundResultEvent(result == RoundResult.WIN) from window LastRoundResultEvents,
            count($event)
        )
        not(WinStreakEvent())
    then
        System.out.println("WIN STREAK");
        modify ($game) { setStreak(Streak.WIN) }
        insert(new WinStreakEvent());
end

rule "Detect Loss Streak"
    no-loop true
    when
        $game: Game()
        $resultEvent: RoundResultEvent()
        Number(intValue == 3) from accumulate (
            $event: RoundResultEvent(result == RoundResult.LOSS) from window LastRoundResultEvents,
            count($event)
        )
        not(LossStreakEvent())
    then
        System.out.println("LOSS STREAK");
        modify ($game) { setStreak(Streak.LOSS) }
        insert(new LossStreakEvent());
end

rule "Detect game start"
    no-loop true
    when
        $s: String(this == "GAME START")
        Game()
    then
        delete($s);
        System.out.println("THE GAME HAS STARTED");
        insert(new PlayerPositionEvent());
end

rule "Detect turn"
    when
        $game: Game()
        $t: TurnStartEvent();
    then
        System.out.println("A TURN HAS STARTED");
        PlayerPositionValueEvent positionValueEvent = new PlayerPositionValueEvent(
                0.01 * $game.getPlayer().getGold()
                + 0.5 * (Boolean.compare($game.getStreak() == Streak.WIN, true) + 1)
                - 0.5 * (Boolean.compare($game.getStreak() == Streak.LOSS, true) + 1)
                + 0.05 * ($game.getPlayer().getLevel() - $game.getAverageLevel())
                + 0.03 * ($game.getPlayer().getHp() - $game.getAverageHp())
                );
        System.out.println("VALUE IS: " + positionValueEvent.getValue());
        insert(positionValueEvent);
        modify($game) { setTurn($game.getTurn() + 1) };
        delete($t);
end

rule "Calculate player position change"
    activation-group "calculatePlayerPositionChangeActivationGroup"
    when
        $p1: PlayerPositionValueEvent()
        $p2: PlayerPositionValueEvent(this != $p1)
        $p2v: Double() from accumulate(
            $event: PlayerPositionValueEvent(this != $p1) from window LastPlayerPositionValueEvents,
            sum($event.getValue())
        )
    then
        delete($p2)
        double valueDiff = $p1.getValue() - $p2v;
        System.out.println("POSITION VALUE DIFF IS: " + valueDiff);
        PlayerPositionChangeEvent changeEvent = new PlayerPositionChangeEvent(valueDiff);
        insert(changeEvent);
end

rule "Declare neutral player position"
    when
        $game: Game()
        $p: PlayerPositionChangeEvent(value > -0.1, value < 0.1)
        not(PlayerPositionChangeEvent(this after $p))
    then
        System.out.println("NEUTRAL POSITION DECLARED");
        delete($p);
        modify($game) { setCurrentPosition(PlayerPosition.NEUTRAL)};
        modify($game) { setCurrentPositionTrend(PlayerPositionTrend.NONE)};
        insert(new PlayerPositionEvent(PlayerPosition.NEUTRAL));
end

rule "Declare negative player position"
    when
        $game: Game()
        $p: PlayerPositionChangeEvent(value < -0.1)
        not(PlayerPositionChangeEvent(this after $p))
    then
        System.out.println("NEGATIVE POSITION DECLARED");
        delete($p);
        modify($game) { setCurrentPosition(PlayerPosition.NEGATIVE)};
        modify($game) {
        setCurrentPositionTrend($game.getCurrentPositionTrend() == PlayerPositionTrend.GOOD ? PlayerPositionTrend.NONE :
        ($game.getCurrentPositionTrend() == PlayerPositionTrend.BAD ? PlayerPositionTrend.BAD : PlayerPositionTrend.NONE))
        };
        insert(new PlayerPositionEvent(PlayerPosition.NEGATIVE));

end

rule "Declare positive player position"
    when
        $game: Game()
        $p: PlayerPositionChangeEvent(value > 0.1)
        not(PlayerPositionChangeEvent(this after $p))
    then
        System.out.println("POSITIVE POSITION DECLARED");
        delete($p);
        modify($game) { setCurrentPosition(PlayerPosition.POSITIVE)};
        modify($game) {
        setCurrentPositionTrend($game.getCurrentPositionTrend() == PlayerPositionTrend.BAD ? PlayerPositionTrend.NONE :
        ($game.getCurrentPositionTrend() == PlayerPositionTrend.GOOD ? PlayerPositionTrend.GOOD : PlayerPositionTrend.NONE))
        };
        insert(new PlayerPositionEvent(PlayerPosition.POSITIVE));
end

rule "Detect bad trend"
    no-loop true
    when
        $game: Game()
        $PPevent: PlayerPositionEvent()
        Number(intValue == 3) from accumulate (
            $event: PlayerPositionEvent(position == PlayerPosition.NEGATIVE) from window LastPlayerPositionEvents,
            count($event)
        )
    then
        System.out.println("BAD TREND. CHANGE YOUR STRATEGY.");
        modify($game) { setCurrentPositionTrend(PlayerPositionTrend.BAD)};
end

rule "Detect good trend"
    no-loop true
    when
        $game: Game()
        $PPevent: PlayerPositionEvent()
        Number(intValue == 3) from accumulate (
            $event: PlayerPositionEvent(position == PlayerPosition.POSITIVE) from window LastPlayerPositionEvents,
            count($event)
        )
    then
        System.out.println("GREAT TREND. KEEP IT UP.");
        modify($game) { setCurrentPositionTrend(PlayerPositionTrend.GOOD)};
end
