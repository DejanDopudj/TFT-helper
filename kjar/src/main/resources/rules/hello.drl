package rules;

import com.ftn.sbnz.model.event.AugmentEvent;
import com.ftn.sbnz.model.Game;
import com.ftn.sbnz.model.Composition;
import com.ftn.sbnz.model.Component;
import com.ftn.sbnz.model.Augment;
import com.ftn.sbnz.model.Carry;
import com.ftn.sbnz.service.service.RuleService;
import java.util.Map
import java.util.List;
import java.util.HashMap;
import java.lang.Math;
import  java.util.AbstractMap.SimpleEntry;

global RuleService ruleService;
global List<Double> augmentEventConection;

rule "FirstAugmentUpdate"
no-loop
    when
        $currentGame: Game($augment1:augmentChoice.get(0).getKey(), username == "test", phase == 0)
        $aug1: Number() from accumulate(
            $e1: AugmentEvent(name == ((Augment)$augment1).getName())
            over window:time(20s),
            count($e1)
        )
    then
        Augment augment = (Augment)$augment1;
        $aug1 = ruleService.getAugmentCompositionConnection(augment, $currentGame.getComposition()) * augment.getAveragePlace() * (Double) augmentEventConection.get($aug1.intValue());
        modify($currentGame) {
            addAugmentChoiceValue(augment, $aug1.doubleValue() )
        };
        System.out.println(augment + "" + $aug1.doubleValue());
        modify($currentGame) {
            setPhase($currentGame.getPhase() + 1)
        };
end

rule "SecondAugmentUpdate"
no-loop
    when
        $currentGame: Game($augment2:augmentChoice.get(1).getKey(), username == "test", phase == 1)
        $aug2: Number() from accumulate(
            $e1: AugmentEvent(name == ((Augment)$augment2).getName())
            over window:time(20s),
            count($e1)
        )
    then
        Augment augment = (Augment)$augment2;
        $aug2 = ruleService.getAugmentCompositionConnection(augment, $currentGame.getComposition()) * augment.getAveragePlace() * (Double) augmentEventConection.get($aug2.intValue());
        modify($currentGame) {
            addAugmentChoiceValue(augment, $aug2.doubleValue() )
        };
        System.out.println(augment + "" + $aug2.doubleValue());
        modify($currentGame) {
            setPhase($currentGame.getPhase() + 1)
        };
end

rule "ThirdAugmentUpdate"
no-loop
    when
        $currentGame: Game($augment3:augmentChoice.get(2).getKey(), username == "test", phase == 2)
        $aug3: Number() from accumulate(
            $e1: AugmentEvent(name == ((Augment)$augment3).getName())
            over window:time(20s),
            count($e1)
        )
    then
        Augment augment = (Augment)$augment3;
        $aug3 =
        ruleService.getAugmentCompositionConnection(augment, $currentGame.getComposition()) * augment.getAveragePlace() * (Double) augmentEventConection.get($aug3.intValue());
        modify($currentGame) {
            addAugmentChoiceValue(augment, $aug3.doubleValue() )
        };
        System.out.println(augment);
        modify($currentGame) {
            setPhase($currentGame.getPhase() + 1)
        };
end


rule "AugmentChoice"
no-loop
    when
        $currentGame: Game($augmentChoice:augmentChoice, username == "test", phase == 3)
        $correctAugment: Augment() from accumulate(
            SimpleEntry($key: key, $value: value) from $augmentChoice,
            init(Double minValue = 9999.0;
                Augment augment = new Augment();
            ),
            action(
                if ((Double)$value < minValue) {
                    augment = (Augment)$key;
                    minValue = (Double)$value;
                }
            ),
            result(augment)
        )
    then
        System.out.println("Correct augment" + $correctAugment);
        modify($currentGame) {
            addAugment($correctAugment)
        };
        modify($currentGame) {
            setPhase($currentGame.getPhase() + 1)
        };
end




rule "CompositionUpdate"
no-loop
when
    $currentGame: Game(username == "test", phase == 4)
    $map: HashMap() from accumulate(
        $entry: Map.Entry($key: key, $value: value) from $currentGame.getCompValue().entrySet(),
        init(HashMap resultMap = new HashMap();),
        action(resultMap.put($key, (double)$value +
        (double)(ruleService.getAugmentCompositionConnection($currentGame.getAugments().get($currentGame.getAugments().size() - 1)
                        ,(Composition)$key) / 2)
        );),
        result(resultMap)
    )
    $maxEntry: Map.Entry($maxKey: key, $maxValue: value) from accumulate(
        $entry: Map.Entry($key: key, $value: value) from $map.entrySet(),
        init(Map.Entry<Composition, Double> maxEntry = null; double maxValue = Double.MIN_VALUE;),
        action(if ((double)$value > (double)maxValue) { maxValue = (double)$value; maxEntry = $entry; }),
        result(maxEntry)
    )
then
    modify($currentGame) {
        setCompValue($map)
    };
    modify($currentGame) {
        setComposition((Composition)$maxEntry.getKey())
    };
    System.out.println(((Composition)$maxEntry.getKey()).getName());
    modify($currentGame) {
        setPhase($currentGame.getPhase() + 1)
    };
end

rule "ChampionsForComposition"
no-loop
when
    $currentGame: Game(username == "test", phase == 5)
then
    insert(new Carry($currentGame.getComposition().getCarry().getName(), $currentGame.getId(), $currentGame.getUsername(), false));
    modify($currentGame) {
        setPhase($currentGame.getPhase() + 1)
    };
end

rule "GenerateCarry"
no-loop
when
    $carry: Carry(username == "test")
    $currentGame: Game(username == "test", phase == 6)
    eval($currentGame.getComponents().size() > 0)
then
    List<Component> missingComponents = ruleService.getMissingComponents($carry, $currentGame.getComponents());
    System.out.println("You are missing: ");
    for(Component component : missingComponents){
        System.out.println(component.getName());
    }
    modify($currentGame) {
        setPhase($currentGame.getPhase() + 1)
    };
end